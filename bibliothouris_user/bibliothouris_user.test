<?php

module_load_include('test', 'simpletest_clone');

class UserTestCase extends SimpleTestCloneTestCase {

  public static function getInfo() {
  return array(
    'name' => 'User test',
    'description' => 'Test creating user',
    'group' => 'Bibliotouris',
    );
  }

  public function setUp() {
  parent::setup('bibliothouris_user');
  /*  $roles = user_roles();
    $role = 'employee';

    // Find the index for the role we want to assign to the user.
    $index = array_search($role, $roles);


    // Get the permissions for the role.
    $permissions = user_role_permissions(array(array_search($role, $roles) => $role));


    // Create the user with the permissions.
    $user = $this->drupalCreateUser(array_keys($permissions[$index]));


    // Assign the role.
    $user->roles[$index] = $role;

    // Return the user we have created.
    $this->medewerker = $this->drupalCreateUser($permissions);
*/
  $this->medewerker = $this->drupalCreateUser(array('administer users', 'create users'));
  $this->drupalLogin($this->medewerker);

  }

  public function testCreateLibraryMember() {

    //invalid email
    $edit = array();
    $edit['mail'] = 'invalidEmail';
    $edit['field_national_number[und][0][value]'] = '93051822361';
    $edit['field_date_of_birth[und][0][value][date]'] = '18/05/1993';
    $edit['field_last_name[und][0][value]'] = 'TestLastName';
    $edit['field_first_name[und][0][value]'] = 'TestFirstName';
    $this->drupalPost('admin/people/create', $edit, t('Create new account'));
    $this->assertText(format_string('The e-mail address @mail is not valid.', array('@mail' => $edit['mail'])));

    //valid fields, no password
    $edit = array();
    $randomString = $this->randomName(8);
    $edit['mail'] = $randomString . '@test.com';
    $edit['field_national_number[und][0][value]'] = '93051822361';
    $edit['field_date_of_birth[und][0][value][date]'] = '18/05/1993';
    $edit['field_last_name[und][0][value]'] = 'TestLastName';
    $edit['field_first_name[und][0][value]'] = 'TestFirstName';
    $this->drupalPost('admin/people/create', $edit, t('Create new account'));
    $this->assertText('Since you did not provide a password, it was generated automatically for this account.');
    $this->assertText(format_string('A welcome message with further instructions has been e-mailed to the new user @username.', array('@username' => $randomString)));

    //valid fields, invalid national number
    $edit = array();
    $randomString = $this->randomName(8);
    $edit['mail'] = $randomString . '@test.com';
    $edit['field_national_number[und][0][value]'] = '9305182361';
    $edit['field_date_of_birth[und][0][value][date]'] = '18/05/1993';
    $edit['field_last_name[und][0][value]'] = 'TestLastName';
    $edit['field_first_name[und][0][value]'] = 'TestFirstName';
    $this->drupalPost('admin/people/create', $edit, t('Create new account'));
    $this->assertText('National number must contain 11 numbers.');

    //valid fields, invalid national number
    $edit = array();
    $randomString = $this->randomName(8);
    $edit['mail'] = $randomString . '@test.com';
    $edit['field_national_number[und][0][value]'] = '93051822361';
    $edit['field_date_of_birth[und][0][value][date]'] = '17/05/1993';
    $edit['field_last_name[und][0][value]'] = 'TestLastName';
    $edit['field_first_name[und][0][value]'] = 'TestFirstName';
    $this->drupalPost('admin/people/create', $edit, t('Create new account'));
    $this->assertText('National number does not match day of birth.');

  }

  public function testValidateNationalNumber() {
    $this->assertTrue(validate_national_number('89041727347', '1989-04-17'), "Valid national number 1");
    $this->assertTrue(validate_national_number('93051822361', '1993-05-18'), "Valid national number 2");
    $this->assertFalse(validate_national_number('93051822363', '1993-05-18'), "Valid national number 3");
  }
}
