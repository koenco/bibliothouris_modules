<?php
/**
 * @file
 * Code for the Bibliothouris_views feature.
 */

include_once 'bibliothouris_views.features.inc';

function bibliothouris_views_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'views_exposed_form' && $form['#id'] == 'views-exposed-form-show-all-members-page') {
    // add the javascript
    drupal_add_js(drupal_get_path('module', 'bibliothouris_views') . '/autocomplete_autosubmit.js', array('group' => JS_THEME));
    drupal_add_js(drupal_get_path('module', 'bibliothouris_views') . '/autocompletehook.js', array('group' => JS_THEME));

    $form['field_first_name_value'] = array(
      '#type' => 'textfield',
      '#autocomplete_path' => 'autocomplete/user/first_name',
      '#attributes' => array('class' => array('auto_submit')), //add this attribute so jquery can complete its check
    );

    $form['field_last_name_value'] = array(
      '#type' => 'textfield',
      '#autocomplete_path' => 'autocomplete/user/last_name',
      '#attributes' => array('class' => array('auto_submit')), //add this attribute so jquery can complete its check
    );

  }
}

function bibliothouris_views_permission() {
  return array(
    'lend out a book' => array(
      'title' => 'Lend out a book'
    )
  );
}

function bibliothouris_views_menu() {
  $items['autocomplete/user/first_name'] = array(
    'page callback' => 'autocomplete_user_first_name',
    'access callback' => TRUE,
    'weight' => 1,
  );
  $items['autocomplete/user/last_name'] = array(
    'page callback' => 'autocomplete_user_last_name',
    'access callback' => TRUE,
    'weight' => 1,
  );
  $items['lendabook/%/%'] = array(
    'page callback' => 'bibliothouris_views_lendabook',
    'page arguments' => array(1, 2),
    'access arguments' => array('lend out a book'),
    'weight' => 1,
  );
  $items['bringbookback/%'] = array(
    'page callback' => 'bibliothouris_views_bringbookback',
    'page arguments' => array(1, 2),
    'access arguments' => array('lend out a book'),
    'weight' => 1,
  );
  return $items;
}

function autocomplete_user_first_name($string = '') {
  if ($_GET['q'] == "autocomplete/user/first_name") {
    return drupal_not_found();
  }
  else {
    $items = array();
    if (isset($string)) {

      $query = db_select('field_data_field_first_name', 'i');
      $value = $query->join('field_data_field_last_name', 'ln', 'ln.entity_id = i.entity_id');
      $value = $query->fields('i', array('entity_id', 'field_first_name_value',));
      $value = $query->condition('field_first_name_value', '%' . $_POST['firstname'] . '%', 'LIKE');
      $value = $query->condition('field_last_name_value', '%' . $_POST['lastname'] . '%', 'LIKE');
      $value = $query->range(0, 10)
        ->execute();
      $data = array();

      foreach ($value as $val) {
        $items[$val->field_first_name_value] = check_plain($val->field_first_name_value);
      }

      if (count($items) == 0) {
        $items[$string] = check_plain("No users found with this first name");
      }
    }
    print drupal_json_output($items);
    exit();
  }
}

function autocomplete_user_last_name($string = '') {
  if ($_GET['q'] == "autocomplete/user/last_name") {
    return drupal_not_found();
  }
  else {
    $items = array();
    if (isset($string)) {

      $query = db_select('field_data_field_last_name', 'i');
      $value = $query->join('field_data_field_first_name', 'fn', 'fn.entity_id = i.entity_id');
      $value = $query->fields('i', array('entity_id', 'field_last_name_value',));
      $value = $query->condition('field_first_name_value', '%' . $_POST['firstname'] . '%', 'LIKE');
      $value = $query->condition('field_last_name_value', '%' . $_POST['lastname'] . '%', 'LIKE');
      $value = $query->range(0, 10)
        ->execute();
      $data = array();

      foreach ($value as $val) {
        $items[$val->field_last_name_value] = check_plain($val->field_last_name_value);
      }

      if (count($items) == 0) {
        $items[$string] = check_plain("No users found with this last name");
      }
    }
    print drupal_json_output($items);
    exit();
  }
}


function bibliothouris_views_views_ajax_data_alter(&$commands, $view) {
  if ($view->name == 'enter_a_new_book' || $view->name == 'borrowed_books') {
    ////HACKY: the view ignores the [bib:uid] token so we replace it with the id from the url
    ///Does this after every ajax request
    $commands[1]['data'] = str_replace('%5Bbib%3Auid%5D', arg(1), $commands[1]['data']);
  }
}

function bibliothouris_views_block_view_alter(&$data, $block) {
  if (isset($data['subject']) && ($data['subject'] == "Enter a new book" || $data['subject'] == 'Borrowed books')) {
    ////HACKY: the view ignores the [bib:uid] token so we replace it with the id from the url
    ///Only works first time table is made
    $data['content']['#markup'] = str_replace('%5Bbib%3Auid%5D', arg(1), $data['content']['#markup']);
  }
  if (isset($data['subject']) && $data['subject'] == 'Borrowed books') {
    //kpr($data['content']['#markup']);die;
    //$data['content']['#markup'] = str_replace('%5Bbib%3Afine%5D', calculateFine(), $data['content']['#markup']);
  }
}

function bibliothouris_views_views_pre_render(&$view) {
  if ($view->name == 'borrowed_books') {
    //kpr($view);
    foreach ($view->result as $res) {
      $startdate = strtotime($res->field_field_start_date[0]['raw']['value']);
      $duedate = strtotime(date("Y-m-d", $startdate) . " +3 week");
      $workingdays = getWorkingDays(date("Y-m-d", $duedate), date("Y-m-d"), getHolidays());
      $fine = calculateFine($workingdays);

      // modify date field to remove the time
      $res->field_field_start_date[0]['rendered']['#markup'] = date('d-m-Y', strtotime($res->field_field_start_date[0]['rendered']['#markup']));

      $res->field_field_fine = array(
        0 => array(
          'rendered' => array(
            '#markup' => '€ ' . $fine,
            '#access' => TRUE
          ),
          'raw' => array(
            'value' => '€ ' . $fine,
            'format' => NULL,
            'safe_value' => '€ ' . $fine,
          )
        )
      );
      $res->field_field_return_date = array(
        0 => array(
          'rendered' => array(
            '#markup' => date('d-m-Y', strtotime(date('d-m-Y', $startdate) . ' +3 week')),
            '#access' => TRUE
          ),
          'raw' => array(
            'value' => date('d-m-Y', strtotime(date('d-m-Y', $startdate) . ' +3 week')),
            'format' => NULL,
            'safe_value' => date('d-m-Y', strtotime(date('d-m-Y', $startdate) . ' +3 week')),
          )
        )
      );
    }
  }
  if($view->name =='overdue_books'){
   // kpr($view);
    foreach ($view->result as $res) {
      $startdate = strtotime($res->field_field_start_date[0]['raw']['value']);
      $duedate = strtotime(date("Y-m-d", $startdate) . " +3 week");
      $workingdays = getWorkingDays(date("Y-m-d", $duedate), date("Y-m-d"), getHolidays());
      $res->field_field_fine = array(
        0 => array(
          'rendered' => array(
            '#markup' => $workingdays-1,
            '#access' => TRUE
          ),
          'raw' => array(
            'value' => $workingdays-1,
            'format' => NULL,
            'safe_value' => $workingdays-1,
          )
        )
      );
      $res->field_field_return_date = array(
        0 => array(
          'rendered' => array(
            '#markup' => date('d-m-Y', strtotime(date('d-m-Y', $startdate) . ' +3 week')),
            '#access' => TRUE
          ),
          'raw' => array(
            'value' => date('d-m-Y', strtotime(date('d-m-Y', $startdate) . ' +3 week')),
            'format' => NULL,
            'safe_value' => date('d-m-Y', strtotime(date('d-m-Y', $startdate) . ' +3 week')),
          )
        )
      );
    }
  }
}

function calculateFine($workingdays) {
  if ($workingdays > 0) {
    return ($workingdays - 1) * 0.30;
  }
  return 0;

}

function getHolidays() {
  return db_query('SELECT holiday_date FROM {bibliothouris_data_holiday}')->fetchCol();
}

//from php.net
//The function returns the no. of business days between two dates and it skips the holidays
function getWorkingDays($startDate, $endDate, $holidays) {
  // do strtotime calculations just once
  $endDate = strtotime($endDate);
  $startDate = strtotime($startDate);


  //The total number of days between the two dates. We compute the no. of seconds and divide it to 60*60*24
  //We add one to inlude both dates in the interval.
  $days = ($endDate - $startDate) / 86400 + 1;

  $no_full_weeks = floor($days / 7);
  $no_remaining_days = fmod($days, 7);

  //It will return 1 if it's Monday,.. ,7 for Sunday
  $the_first_day_of_week = date("N", $startDate);
  $the_last_day_of_week = date("N", $endDate);

  //---->The two can be equal in leap years when february has 29 days, the equal sign is added here
  //In the first case the whole interval is within a week, in the second case the interval falls in two weeks.
  if ($the_first_day_of_week <= $the_last_day_of_week) {
    if ($the_first_day_of_week <= 6 && 6 <= $the_last_day_of_week) {
      $no_remaining_days--;
    }
    if ($the_first_day_of_week <= 7 && 7 <= $the_last_day_of_week) {
      $no_remaining_days--;
    }
  }
  else {
    // (edit by Tokes to fix an edge case where the start day was a Sunday
    // and the end day was NOT a Saturday)

    // the day of the week for start is later than the day of the week for end
    if ($the_first_day_of_week == 7) {
      // if the start date is a Sunday, then we definitely subtract 1 day
      $no_remaining_days--;

      if ($the_last_day_of_week == 6) {
        // if the end date is a Saturday, then we subtract another day
        $no_remaining_days--;
      }
    }
    else {
      // the start date was a Saturday (or earlier), and the end date was (Mon..Fri)
      // so we skip an entire weekend and subtract 2 days
      $no_remaining_days -= 2;
    }
  }

  //The no. of business days is: (number of weeks between the two dates) * (5 working days) + the remainder
//---->february in none leap years gave a remainder of 0 but still calculated weekends between first and last day, this is one way to fix it
  $workingDays = $no_full_weeks * 5;
  if ($no_remaining_days > 0) {
    $workingDays += $no_remaining_days;
  }

  //We subtract the holidays
  foreach ($holidays as $holiday) {
    $time_stamp = strtotime($holiday);
    //If the holiday doesn't fall in weekend
    if ($startDate <= $time_stamp && $time_stamp <= $endDate && date("N", $time_stamp) != 6 && date("N", $time_stamp) != 7) {
      $workingDays--;
    }
  }

  return $workingDays;
}

/*
 * $holidays=array("2008-12-25","2008-12-26","2009-01-01");
 *
 * echo getWorkingDays("2008-12-22","2009-01-02",$holidays)
*/

function bibliothouris_views_bringbookback($lendedbookid, $userid) {
  $node = node_load($lendedbookid);
  $node->field_return_date = array(
    'und' => array(
      array(
        'value' => date("Y/m/d 00:00:00", REQUEST_TIME),
        'timezone' => 'Europe/Berlin',
        'timezone_db' => 'Europe/Berlin',
        'date_type' => 'datetime',
      ),
    ),
  );
  node_save($node);

  $bookid = db_query("SELECT field_book_nid FROM field_data_field_book WHERE entity_id = :eid", array('eid' => $lendedbookid))->fetchField();

  update_status($bookid);
  drupal_set_message('Succesfully brought back the book.');

  drupal_goto('user/' . $userid);
}

function bibliothouris_views_lendabook($bookid, $userid) {
  $numberOfBooks = numberOfLendedBooks($userid);
  if ($numberOfBooks < 3) {
    if (isBookLended($bookid)) {
      drupal_set_message('This book is already lend out.', 'error');
    }
    else {
      create_lended_book($bookid, $userid);
      drupal_set_message('Succesfully lend out the book.');
    }
  }
  else {
    drupal_set_message('User already has ' . $numberOfBooks . ' books', 'error');
  }
  drupal_goto('user/' . $userid);
}

function isBookLended($bookid) {
  if (getTimesLendedOut($bookid) >= getNumberOfBooks($bookid)) {
    return TRUE;
  }
  return FALSE;
}

function getTimesLendedOut($bookid) {
  return db_query("SELECT count(*) FROM {node} n
    LEFT OUTER JOIN {field_data_field_return_date} rd
    ON n.nid = rd.entity_id
    LEFT OUTER JOIN {field_data_field_book} b ON
    n.nid = b.entity_id
    WHERE n.type = 'lended_book'
    AND b.field_book_nid=:nid
    AND rd.field_return_date_value IS NULL", array('nid' => $bookid))->fetchField();
}

function getNumberOfBooks($bookid) {
  return db_query("SELECT field_number_of_books_value FROM {field_data_field_number_of_books}
    WHERE entity_id = :bid", array('bid' => $bookid))->fetchField();
  ;
}

function numberOfLendedBooks($userid) {

  return db_query("SELECT count(*) FROM {node} n
    LEFT OUTER JOIN {field_data_field_return_date} rd
    ON n.nid = rd.entity_id
    LEFT OUTER JOIN {field_data_field_user}  u ON
    n.nid = u.entity_id
    WHERE n.type = 'lended_book'
    AND u.field_user_uid = :uid
    AND rd.field_return_date_value IS NULL", array('uid' => $userid))->fetchField();
}

function create_lended_book($bookid, $userid) {
  $node = new stdClass();
  $node->type = 'lended_book';
  node_object_prepare($node);

  $node->language = LANGUAGE_NONE;
  $node->title = 'Lended book';
  $node->field_book = array(
    'und' => array(
      array(
        'nid' => $bookid,
      ),
    ),
  );
  $node->field_start_date = array(
    'und' => array(
      array(
        'value' => date("Y/m/d 00:00:00", REQUEST_TIME),
        'timezone' => 'Europe/Berlin',
        'timezone_db' => 'Europe/Berlin',
        'date_type' => 'datetime',
      ),
    ),
  );
  $node->field_user = array(
    'und' => array(
      array(
        'uid' => $userid,
      ),
    ),
  );

  node_save($node);

  update_status($bookid);
}

function update_status($bookid) {

  $book = node_load($bookid);

  if (isBookLended($bookid)) {
    //taxonomy with id 1: loaned
    $status = 1;
  }
  else {
    //taxonomy with id 4: available
    $status = 4;
  }

  $book->field_status['und'][0]['tid'] = $status;
  node_save($book);
}

function bibliothouris_views_token_info() {
  $type = array(
    'name' => t('bib'),
    'description' => t('BUsers related to individual nodes.'),
    'needs-data' => 'bib',
  );

  $node['uid'] = array(
    'name' => t("UserId"),
    'description' => t("TheOriginalUserId."),
  );

  return array(
    'types' => array('node' => $type),
    'tokens' => array('node' => $node),
  );
}

function bibliothouris_views_tokens($type, $tokens, $data = array(), $options = array()) {
  $replacements = array();

  if ($type == 'bib' && !empty($data['bib'])) {

    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'uid':
          $replacements[$original] = arg(1);
          break;
      }
    }
  }

  return $replacements;
}

function bibliothouris_views_query_alter(QueryAlterableInterface $query) {

  if (isset($query->alterTags['views_enter_a_new_book'])) {
    if (count(getUnavailableBooks()) > 0) {
      $query->condition('nid', getUnavailableBooks(), 'NOT IN');
    }
  }
  if (isset($query->alterTags['views_overdue_books'])) {
    if (count(getUnavailableBooks()) > 0) {
      $query->condition('node_field_data_field_book.nid', getOverdueBooks(), 'IN');
    }
  }

  if (isset($query->alterTags['views_top_10_borrowed_books'])) {

    $mostBorrowedBooks = getMostBorrowedBooks();
    $query->condition('node.nid', $mostBorrowedBooks, 'IN');
    $query->orderBy("FIELD(node.nid, ".implode(',',$mostBorrowedBooks).".)");

  }
}


function getMostBorrowedBooks() {
  return db_query(
    "SELECT n.nid
      FROM {node} n
      JOIN {field_data_field_book} b
        ON n.nid = b.field_book_nid
      GROUP BY b.field_book_nid
      ORDER BY count(b.field_book_nid) DESC
      LIMIT 0,10"
  )->fetchCol();
}
function getUnavailableBooks() {

  return db_query("SELECT n.nid FROM {node} n
  JOIN {field_data_field_status} s
    ON n.nid = s.entity_id
  WHERE s.field_status_tid = 1")->fetchCol();

}

function getOverdueBooks() {
  return db_query("SELECT b.field_book_nid FROM {node} n
    LEFT OUTER JOIN {field_data_field_start_date} sd
    ON n.nid = sd.entity_id
    LEFT OUTER JOIN {field_data_field_book} b ON
    n.nid = b.entity_id
    WHERE n.type = 'lended_book'
    AND DATE(NOW()) >= sd.field_start_date_value + INTERVAL 3 WEEK")->fetchCol();
}