<?php
/**
 * @file
 * Code for the Bibliothouris_views feature.
 */

include_once 'bibliothouris_views.features.inc';

function bibliothouris_views_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'views_exposed_form' && $form['#id'] == 'views-exposed-form-show-all-members-page') {
    // add the javascript
    drupal_add_js(drupal_get_path('module', 'bibliothouris_views') . '/autocomplete_autosubmit.js', array('group' => JS_THEME));
    drupal_add_js(drupal_get_path('module', 'bibliothouris_views') . '/autocompletehook.js', array('group' => JS_THEME));

    $form['field_first_name_value'] = array(
      '#type' => 'textfield',
      '#autocomplete_path' => 'autocomplete/user/first_name',
      '#attributes' => array('class' => array('auto_submit')), //add this attribute so jquery can complete its check
    );

    $form['field_last_name_value'] = array(
      '#type' => 'textfield',
      '#autocomplete_path' => 'autocomplete/user/last_name',
      '#attributes' => array('class' => array('auto_submit')), //add this attribute so jquery can complete its check
    );

  }
}

function bibliothouris_views_permission() {
  return array(
    'lend out a book' => array(
      'title' => 'Lend out a book'
    )
  );
}

function bibliothouris_views_menu() {
  $items['autocomplete/user/first_name'] = array(
    'page callback' => 'autocomplete_user_first_name',
    'access callback' => TRUE,
    'weight' => 1,
  );
  $items['autocomplete/user/last_name'] = array(
    'page callback' => 'autocomplete_user_last_name',
    'access callback' => TRUE,
    'weight' => 1,
  );
  $items['lendabook/%/%'] = array(
    'page callback' => 'bibliothouris_views_lendabook',
    'page arguments' => array(1, 2),
    'access arguments' => array('lend out a book'),
    'weight' => 1,
  );
  return $items;
}

function autocomplete_user_first_name($string = '') {
  if ($_GET['q'] == "autocomplete/user/first_name") {
    return drupal_not_found();
  }
  else {
    $items = array();
    if (isset($string)) {

      $query = db_select('field_data_field_first_name', 'i');
      $value = $query->join('field_data_field_last_name', 'ln', 'ln.entity_id = i.entity_id');
      $value = $query->fields('i', array('entity_id', 'field_first_name_value',));
      $value = $query->condition('field_first_name_value', '%' . $_POST['firstname'] . '%', 'LIKE');
      $value = $query->condition('field_last_name_value', '%' . $_POST['lastname'] . '%', 'LIKE');
      $value = $query->range(0, 10)
        ->execute();
      $data = array();

      foreach ($value as $val) {
        $items[$val->field_first_name_value] = check_plain($val->field_first_name_value);
      }

      if (count($items) == 0) {
        $items[$string] = check_plain("No users found with this first name");
      }
    }
    print drupal_json_output($items);
    exit();
  }
}

function autocomplete_user_last_name($string = '') {
  if ($_GET['q'] == "autocomplete/user/last_name") {
    return drupal_not_found();
  }
  else {
    $items = array();
    if (isset($string)) {

      $query = db_select('field_data_field_last_name', 'i');
      $value = $query->join('field_data_field_first_name', 'fn', 'fn.entity_id = i.entity_id');
      $value = $query->fields('i', array('entity_id', 'field_last_name_value',));
      $value = $query->condition('field_first_name_value', '%' . $_POST['firstname'] . '%', 'LIKE');
      $value = $query->condition('field_last_name_value', '%' . $_POST['lastname'] . '%', 'LIKE');
      $value = $query->range(0, 10)
        ->execute();
      $data = array();

      foreach ($value as $val) {
        $items[$val->field_last_name_value] = check_plain($val->field_last_name_value);
      }

      if (count($items) == 0) {
        $items[$string] = check_plain("No users found with this last name");
      }
    }
    print drupal_json_output($items);
    exit();
  }


}

function bibliothouris_views_views_pre_render(&$view) {
  //print token_replace('[bib:uid]', array('bib' => 1));
  //print token_replace('[bib:origuser]', array('bib' => 2));
  //die;
  if ($view->name == "enter_a_new_book") {
    // kpr($view);

    foreach ($view->result as $bla) {
      /*$bla->field_lendbook = array(
        0 => array(
          'rendered' => array(
            '#markup' => "+",
            '#access' => TRUE,
          ),
          'raw' => array(
            'value' => '+',
            'format' => NULL,
            'safe_value' => '+',
          ),
        ),
      );*/
      //kpr($bla);
    }

  }

}
function bibliothouris_views_views_ajax_data_alter(&$commands, $view) {
 $commands[1]['data'] = str_replace('%5Bbib%3Auid%5D', arg(1),$commands[1]['data']);
 // print_r($view);die;
}
function bibliothouris_views_block_view_alter(&$data, $block) {
  if (isset($data['subject']) && $data['subject'] == "Enter a new book") {
    kpr($data['content']);
//    $data['content']['#markup'] = token_replace($data['content']['#markup']);
    ////HACKY: the view ignores the [bib:uid] token so we replace it with the id from the url
    $data['content']['#markup'] = str_replace('%5Bbib%3Auid%5D', arg(1), $data['content']['#markup']);
    //kpr($data['content']);
    //print_r($_GET['q']);
    //print_r(arg(1));die;
  }
}

function bibliothouris_views_lendabook($bookid, $userid) {
  $numberOfBooks = numberOfLendedBooks($userid);
  if ($numberOfBooks < 3) {
    if (isBookLended($bookid)) {
      drupal_set_message('This book is already lend out.', 'error');
    }
    else {
      drupal_set_message('Succesfully lend out the book..');
      create_lended_book($bookid, $userid);
    }
  }
  else {
    drupal_set_message('User already has ' . $numberOfBooks . ' books', 'error');
  }


  drupal_goto('user/' . $userid);
}

function isBookLended($bookid) {
  return db_query("SELECT count(*) FROM {node} n
    LEFT OUTER JOIN {field_data_field_return_date} rd
    ON n.nid = rd.entity_id
    LEFT OUTER JOIN {field_data_field_book} b ON
    n.nid = b.entity_id
    WHERE n.type = 'lended_book'
    AND b.field_book_nid=:nid
    AND rd.field_return_date_value IS NULL", array('nid' => $bookid))->fetchField();
}

function numberOfLendedBooks($userid) {

  return db_query("SELECT count(*) FROM {node} n
    LEFT OUTER JOIN {field_data_field_return_date} rd
    ON n.nid = rd.entity_id
    LEFT OUTER JOIN {field_data_field_user}  u ON
    n.nid = u.entity_id
    WHERE n.type = 'lended_book'
    AND u.field_user_uid = :uid
    AND rd.field_return_date_value IS NULL", array('uid' => $userid))->fetchField();
}

function create_lended_book($bookid, $userid) {
  $node = new stdClass();
  $node->type = 'lended_book';
  node_object_prepare($node);

  // $node->title    = 'Node Created Programmatically on ' . date('c');
  $node->language = LANGUAGE_NONE;

  $node->field_book = array(
    'und' => array(
      array(
        'nid' => $bookid,
      ),
    ),
  );
  $node->field_start_date = array(
    'und' => array(
      array(
        'value' => '2012-09-26 00:00:00',
        'timezone' => 'Europe/Berlin',
        'timezone_db' => 'Europe/Berlin',
        'date_type' => 'datetime',
      ),
    ),
  );
  $node->field_user = array(
    'und' => array(
      array(
        'uid' => $userid,
      ),
    ),
  );

  node_save($node);
}

function bibliothouris_views_token_info() {
  $type = array(
    'name' => t('bib'),
    'description' => t('BUsers related to individual nodes.'),
    'needs-data' => 'bib',
  );

  // Core tokens for nodes.
  $node['nid'] = array(
    'name' => t("Node ID"),
    'description' => t("The unique ID of the node."),
  );
  $node['uid'] = array(
    'name' => t("UserId"),
    'description' => t("TheOriginalUserId."),
  );

  return array(
    'types' => array('node' => $type),
    'tokens' => array('node' => $node),
  );
}

function bibliothouris_views_tokens($type, $tokens, $data = array(), $options = array()) {
  $replacements = array();

  if ($type == 'bib' && !empty($data['bib'])) {

    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'origuser':
          //print_r($_GET['q']);die;
          $replacements[$original] = 1111111111;
          break;
        case 'uid':
          $replacements[$original] = 22222222;
          break;
      }
    }
  }

  return $replacements;
}